{"version":3,"sources":["utils/API.js","components/EmployeeSearchResults.js","App.js","serviceWorker.js","index.js"],"names":["getUsers","a","axios","get","res","data","results","searchUsers","searchText","searchedUsers","filter","r","name","first","toLowerCase","includes","last","email","EmployeeSearchResults","props","searchEmployee","query","API","state","initialResults","then","setState","catch","err","console","log","textInput","React","createRef","this","current","value","id","className","type","placeholder","aria-label","ref","onClick","e","map","index","key","alt","src","picture","medium","href","cell","phone","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uTAEe,GAEbA,SAAS,WAAD,4BAAE,4BAAAC,EAAA,sEACQC,IAAMC,IAAI,iDADlB,cACJC,EADI,yBAEDA,EAAIC,KAAKC,SAFR,2CAAF,kDAAC,GAITC,YAAY,WAAD,4BAAE,WAAgBC,EAAYF,GAA5B,eAAAL,EAAA,6DACPQ,EAAgBH,EAAQI,QAC1B,SAACC,GAAD,OACEA,EAAEC,KAAKC,MAAMC,cAAcC,SAASP,IACpCG,EAAEC,KAAKI,KAAKF,cAAcC,SAASP,IACnCG,EAAEM,MAAMH,cAAcC,SAASP,MALxB,kBAOJC,GAPI,2CAAF,qDAAC,ICsDCS,E,kDA1Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAURC,eAAiB,SAACC,GAChBC,EAAIf,YAAYc,EAAO,EAAKE,MAAMC,gBAC/BC,MAAK,SAACrB,GAAD,OAAS,EAAKsB,SAAS,CAAEpB,QAASF,OACvCuB,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,OAZ9B,EAAKL,MAAQ,CAAEjB,QAAS,GAAIkB,eAAgB,IAC5C,EAAKO,UAAYC,IAAMC,YAHN,E,gMAODX,EAAItB,W,OAAhBI,E,OACJ8B,KAAKR,SAAS,CAAEpB,QAASF,EAAKoB,eAAgBpB,I,sIAU9C,IAAMI,EAAa0B,KAAKH,UAAUI,QAAQC,MAC1CF,KAAKd,eAAeZ,EAAWM,iB,+BAGvB,IAAD,OACP,OACE,6BACE,2BACEuB,GAAG,YACHC,UAAU,iCACVC,KAAK,SACLC,YAAY,SACZC,aAAW,SACXC,IAAKR,KAAKH,YAEZ,4BACEO,UAAU,uCACVC,KAAK,SACLI,QAAS,SAACC,GAAD,OAAO,EAAKD,YAHvB,UAQA,8BACIT,KAAKX,MAAMjB,SAAW,IAAIuC,KAAI,SAAClC,EAAGmC,GAAJ,OAC9B,yBAAKC,IAAKD,GACR,yBAAKC,IAAKD,EAAQ,EAAGE,IAAI,GAAGC,IAAKtC,EAAEuC,QAAQC,SAC3C,uBAAGJ,IAAKD,EAAQ,GAAInC,EAAEC,KAAKC,MAAQ,IAAMF,EAAEC,KAAKI,MAChD,uBAAG+B,IAAKD,EAAQ,EAAGM,KAAM,UAAYzC,EAAEM,OACpCN,EAAEM,OAEL,uBAAG8B,IAAKD,EAAQ,GAAhB,UAA2BnC,EAAE0C,MAAQ1C,EAAE2C,iB,GAlDjBC,aC0BrBC,MAzBf,WACE,OAEE,6BACE,oFACA,yBAAKnB,GAAG,SAER,yBAAKC,UAAU,6BACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAd,sBACA,uBAAGA,UAAU,QAAb,wFAOJ,yBAAKA,UAAU,gCAEb,kBAAC,EAAD,SCXYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEd5C,OAAM,SAAA6C,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.56f2d25a.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default {\n  // Gets all users\n  getUsers: async function () {\n    let res = await axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n    return res.data.results;\n  },\n  searchUsers: async function (searchText, results) {\n    let searchedUsers = results.filter(\n      (r) =>\n        r.name.first.toLowerCase().includes(searchText) ||\n        r.name.last.toLowerCase().includes(searchText) ||\n        r.email.toLowerCase().includes(searchText)\n    );\n    return searchedUsers;\n  },\n};\n","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\n\nclass EmployeeSearchResults extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { results: [], initialResults: [] };\n    this.textInput = React.createRef();\n  }\n\n  async componentDidMount() {\n    let res = await API.getUsers();\n    this.setState({ results: res, initialResults: res });\n  }\n\n  searchEmployee = (query) => {\n    API.searchUsers(query, this.state.initialResults)\n      .then((res) => this.setState({ results: res }))\n      .catch((err) => console.log(err));\n  };\n\n  onClick() {\n    const searchText = this.textInput.current.value;\n    this.searchEmployee(searchText.toLowerCase());\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          id=\"searchBox\"\n          className=\"form-control new-class mr-sm-2\"\n          type=\"search\"\n          placeholder=\"Search\"\n          aria-label=\"Search\"\n          ref={this.textInput}\n        />\n        <button\n          className=\"btn btn-outline-success my-2 my-sm-0\"\n          type=\"submit\"\n          onClick={(e) => this.onClick()}\n        >\n          Search\n        </button>\n\n        <div>\n          {(this.state.results || []).map((r, index) => (\n            <div key={index}>\n              <img key={index + 1} alt=\"\" src={r.picture.medium} />\n              <p key={index + 2}>{r.name.first + \" \" + r.name.last}</p>\n              <a key={index + 3} href={\"mailto:\" + r.email}>\n                {r.email}\n              </a>\n              <p key={index + 4}>Phone: {r.cell || r.phone}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EmployeeSearchResults;\n","import React from \"react\";\nimport \"./App.css\";\nimport EmployeeSearchResults from \"./components/EmployeeSearchResults\";\n\nfunction App() {\n  return (\n    \n    <div>\n      <noscript>You need to enable JavaScript to run this app.</noscript>\n      <div id=\"root\"></div>\n\n      <div className=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\">\n          <h1 className=\"display-4\">EMPLOYEE DIRECTORY</h1>\n          <p className=\"lead\">\n            Click on carrots to filter by heading or use the search box to\n            narrow your results\n          </p>\n        </div>\n      </div>\n\n      <nav className=\"navbar navbar-light bg-light\">\n        {/*<SearchBox />*/} \n        <EmployeeSearchResults />\n        </nav>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}